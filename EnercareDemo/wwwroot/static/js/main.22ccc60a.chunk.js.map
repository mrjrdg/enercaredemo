{"version":3,"sources":["context/AuthContext.js","components/NavMenu.js","components/Layout.js","components/Home.js","components/FetchData.js","components/User.js","App.js","registerServiceWorker.js","index.js"],"names":["AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","isAuthenticated","setIsAuthenticated","user","setUser","isLoading","setIsLoading","getUser","a","fetch","response","json","claims","useEffect","Provider","value","login","window","location","href","logout","NavMenu","props","collapsed","setCollapsed","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Layout","Home","FetchData","forecasts","setForecasts","loading","setLoading","fetchWeather","contents","aria-labelledby","map","forecast","key","date","temperatureC","temperatureF","summary","renderForecastsTable","id","User","claim","type","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.22ccc60a.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nexport const AuthContext = React.createContext();\r\nexport const useAuth = () => useContext(AuthContext);\r\nexport const AuthProvider = ({\r\n    children\r\n}) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState();\r\n    const [user, setUser] = useState();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const getUser = async () => {\r\n        const response = await fetch('/auth/getUser');\r\n        const json = await response.json();\r\n\r\n        setIsAuthenticated(json.isAuthenticated);\r\n        setIsLoading(false);\r\n        if (json.isAuthenticated) setUser(json.claims);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUser();\r\n    }, []);\r\n\r\n    const login = () => {\r\n        window.location.href = '/auth/login';\r\n    }\r\n\r\n    const logout = () => {\r\n        window.location.href = '/auth/logout';\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                isAuthenticated,\r\n                user,\r\n                isLoading,\r\n                login,\r\n                logout\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};","import React, { useState } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nimport './NavMenu.css';\r\n\r\nexport const NavMenu = (props) => {\r\n    const { isAuthenticated } = useAuth();\r\n\r\n    const [collapsed, setCollapsed] = useState(true);\r\n\r\n    const toggleNavbar = () => {\r\n        setCollapsed(!collapsed);\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n                <Container>\r\n                    <NavbarBrand tag={Link} to=\"/\">Auth0 Backend For Frontend Authentication</NavbarBrand>\r\n                    <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\r\n                    <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!collapsed} navbar>\r\n                        <ul className=\"navbar-nav flex-grow\">\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Fetch data</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/user\">User claims</NavLink>\r\n                            </NavItem>\r\n                            {!isAuthenticated && <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/login\">Login</NavLink>\r\n                            </NavItem>}\r\n                            {isAuthenticated && <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/logout\">Logout</NavLink>\r\n                            </NavItem>}\r\n                        </ul>\r\n                    </Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport const Layout = (props) => {\r\n    return (\r\n        <div>\r\n            <NavMenu />\r\n            <Container>\r\n                {props.children}\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport const Home = () => {\r\n    return (\r\n        <div>\r\n            <p>Welcome to your new single-page application, built with:</p>\r\n            <ul>\r\n                <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n                <li><a href='https://auth0.com/'>Auth0</a> for user authentication</li>\r\n                <li><a href='https://facebook.github.io/react/'>React</a> for client-side code</li>\r\n                <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n            </ul>\r\n            <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nexport const FetchData = () => {\r\n    const [forecasts, setForecasts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const fetchWeather = async () => {\r\n        \r\n        const response = await fetch('weatherforecast');\r\n        const json = await response.json();\r\n\r\n        setForecasts(json);\r\n        setLoading(false);\r\n    }\r\n\r\n    const renderForecastsTable = function (forecasts) {\r\n        return (\r\n            <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Date</th>\r\n                        <th>Temp. (C)</th>\r\n                        <th>Temp. (F)</th>\r\n                        <th>Summary</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {forecasts.map(forecast =>\r\n                        <tr key={forecast.date}>\r\n                            <td>{forecast.date}</td>\r\n                            <td>{forecast.temperatureC}</td>\r\n                            <td>{forecast.temperatureF}</td>\r\n                            <td>{forecast.summary}</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchWeather();\r\n    }, []);\r\n\r\n    var contents = (loading) ? <p><em>Loading...</em></p>\r\n        : renderForecastsTable(forecasts);\r\n\r\n    return (\r\n        <div>\r\n            <h1 id=\"tabelLabel\" >Weather forecast</h1>\r\n            <p>This component demonstrates fetching data from the server.</p>\r\n            {contents}\r\n        </div>\r\n    );\r\n    \r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nexport const User = () => {\r\n\r\n    const { user } = useAuth();\r\n\r\n    const renderClaimsTable = function (claims) {\r\n        return (\r\n            <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Type</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {claims.map(claim =>\r\n                        <tr key={claim.type}>\r\n                            <td>{claim.type}</td>\r\n                            <td>{claim.value}</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 id=\"tabelLabel\" >User claims</h1>\r\n            <p>This component demonstrates fetching user identity claims from the server.</p>\r\n            {renderClaimsTable(user)}\r\n        </div>\r\n    );\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Redirect, Route } from 'react-router';\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './components/Home';\r\nimport { FetchData } from './components/FetchData';\r\nimport { User } from './components/User';\r\nimport { useAuth } from './context/AuthContext';\r\n\r\nimport './custom.css'\r\n\r\nconst App = () => {\r\n\r\n    const { isAuthenticated, login, logout } = useAuth();\r\n\r\n    return (\r\n        <Layout>\r\n            <Route exact path='/' component={Home} />\r\n            <Route path='/fetch-data' component={isAuthenticated ? () => { return <FetchData /> } : () => { login(); return null; }}/>\r\n            <Route path='/user' component={isAuthenticated ? () => { return <User /> } : () => { login(); return null; }} />\r\n            <Route path='/login' component={() => { login(); return null }} />\r\n            <Route path='/logout' component={() => { logout(); return null }}></Route>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { AuthProvider } from \"./context/AuthContext\";\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n    <AuthProvider>\r\n        <BrowserRouter basename={baseUrl}>\r\n            <App />\r\n        </BrowserRouter>\r\n    </AuthProvider>,\r\n    rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n\r\n\r\n"],"sourceRoot":""}